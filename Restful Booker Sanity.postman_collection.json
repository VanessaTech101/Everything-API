{
	"info": {
		"_postman_id": "789d2238-33d7-4076-878e-5220d8c07815",
		"name": "Restful Booker Sanity",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37062756",
		"_collection_link": "https://blue-crater-148528.postman.co/workspace/New-Team-Workspace~a5668b75-92c9-4a4c-80a8-57b854010aa4/collection/37062756-789d2238-33d7-4076-878e-5220d8c07815?action=share&source=collection_link&creator=37062756"
	},
	"item": [
		{
			"name": "Regression Scenario Copy",
			"item": [
				{
					"name": "#1 Ping Request Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var chai = require('chai');\r",
									"var expect = require('chai').expect;\r",
									"//chai js - https://www.chaijs.com/guide/styles/\r",
									"//Expect via Chai\r",
									"pm.test(\"Verify that foo is String\",function(){\r",
									"var foo = \"Vanessa\";\r",
									"expect(foo).to.be.a('string');\r",
									"\r",
									"pm.response.to.have.status(201);\r",
									"var something=\"something\";\r",
									"pm.expect(something).to.equal(\"something\");\r",
									"\r",
									"pm.response.to.have.withBody;\r",
									"\r",
									"pm.to.expect(something).to.exist; \r",
									"pm.expect(false).to.be.true; \r",
									"//intended to fail \r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//pm.test(\"Verify that Status code is 201\", function () {\r",
									"//    console.log(pm.info.requestName);\r",
									"//});\r",
									"//It will pass casno no assertions \r",
									"\r",
									"//pm.test(\"Verify that Status code is 201\", function () {\r",
									"//    console.log(name);\r",
									"//});\r",
									"\r",
									"pm.globals.set(\"g_age\",\"30\");\r",
									"//sets global variable\r",
									"\r",
									"pm.test(\"Verify that Status code is 201\", function () {\r",
									"  console.log(pm.info.requestName);\r",
									"  console.log(pm.globals.get(\"global_name\"));\r",
									"  console.log(pm.globals.get(\"gname\"));\r",
									"  console.log(pm.environment.get(\"url\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"// Just for practice :) \r",
									"// console.log(\"Hello World\");\r",
									"// console.log(pm.info.requestName);\r",
									"// console.log(pm.test);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{url}}/ping",
							"protocol": "https",
							"host": [
								"{{url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "#2 Create Token Request Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"token\");\r",
									"});\r",
									"\r",
									"pm.test(\"Token should Exist\", function () {\r",
									"    var response = pm.response.json();\r",
									"    var token = response.token; \r",
									"    pm.expect(token).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Global Variables\", function () {\r",
									"    console.log(pm.globals.get(\"g_age\"));\r",
									"    console.log(pm.collectionVariables.get(\"c_name\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Set Global Variable of Token\", function () {\r",
									"    var response = pm.response.json();\r",
									"    var token = response.token;\r",
									"    pm.environment.set(\"e_token\",token);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{url}}/auth",
							"protocol": "https",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Booking Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{url}}/booking",
							"protocol": "https",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "#3 Create booking (Booking ID NOT null) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed the syntax error in the test script\r",
									"pm.test(\"Set Environment Variables\", function () {\r",
									"  var response = pm.response.json();\r",
									"  var bookingid = response.bookingid;\r",
									"  var checkin = response.booking.bookingdates.checkin;\r",
									"  pm.environment.set(\"bookingid\",bookingid);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"bookingid\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "password123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{url}}/booking",
							"protocol": "https",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single Booking Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{url}}/booking/{{bookingid}}",
							"protocol": "https",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Full update of booking Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"totalprice\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token={{e_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"Jams\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{url}}/booking/{{bookingid}}",
							"protocol": "https",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingid}}"
							]
						},
						"description": "Generated from cURL: CURL -X PUT \\\n  https://restful-booker.herokuapp.com/booking/1 \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Cookie: token=abc123' \\\n  -d '{\n    \"firstname\" : \"James\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}'"
					},
					"response": []
				},
				{
					"name": "Get Single Update by Full Booking Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Hello World\")\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{url}}/booking/{{bookingid}}",
							"protocol": "https",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Partial Update of Existing ID Copy",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "password123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token={{e_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Zandra\",\r\n    \"lastname\" : \"Brown\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{url}}/booking/{{bookingid}}",
							"protocol": "https",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"{{bookingid}}"
							]
						},
						"description": "Generated from cURL: curl -X PATCH \\\r\n  https://restful-booker.herokuapp.com/booking/1 \\\r\n  -H 'Content-Type: application/json' \\\r\n  -H 'Accept: application/json' \\\r\n  -H 'Cookie: token=abc123' \\\r\n  -d '{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\"\r\n}'"
					},
					"response": []
				},
				{
					"name": "Delete using ID Copy",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"value": "token=abc123"
							}
						],
						"url": {
							"raw": "https://{{url}}/booking/1",
							"protocol": "https",
							"host": [
								"{{url}}"
							],
							"path": [
								"booking",
								"1"
							]
						},
						"description": "Generated from cURL: curl -X DELETE \\\r\n  https://restful-booker.herokuapp.com/booking/1 \\\r\n  -H 'Content-Type: application/json' \\\r\n  -H 'Cookie: token=abc123'"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							" pm.collectionVariables.set(\"c_name\",\"collection name\");"
						]
					}
				}
			]
		}
	],
	"variable": [
		{
			"key": "c_name",
			"value": ""
		}
	]
}